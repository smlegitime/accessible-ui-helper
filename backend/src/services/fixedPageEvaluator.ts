/**
 * Performs accessibility evaluation on page after LLM code generation
 * @author Sybille LÃ©gitime
 * @copyright 2024
 */

import axe, { AxeResults, Result } from 'axe-core';
import { JSDOM } from 'jsdom';
import { GeneratedFixPage } from '../models/models';
import { logging } from '../lib/logging';

const logger = logging.getLogger('services.fixedPageEvaluator');

export class FixedPageEvaluator {
    private generatedPage: GeneratedFixPage;
    private originalAxeResults: AxeResults;

    constructor(generatedPage: GeneratedFixPage, originalAxeResults: AxeResults) {
        this.generatedPage = generatedPage;
        this.originalAxeResults = originalAxeResults;
    }

    /**
     * Generates the DOM tree from the input HTML
     * @param inputHtml String of html content
     * @returns 
     */
    private generateDOMFromHtml(inputHtml: string): Document {
        const { document } = new JSDOM(inputHtml).window;
        return document;
    }

    /**
     * Retrieves the Axe accessibility results from HTML page
     * @returns the accessibility results object
     */
    private async getAxeResults(): Promise<AxeResults> {
        try {
            const generatedHtml: string = this.generatedPage['generatedCode']['content'];

            const document: Document = this.generateDOMFromHtml(generatedHtml);

            axe.setup(document);
            const axeResults = await axe.run(document);

            logger.info('Retrieved Axe Core evaluation.')

            return axeResults;
        } catch (error) {
            logger.error(`An error occurred ${error}`);
            throw error;
        }
        
    }

    /**
     * 
     * @param originalViolations Axe violations returned by the frontend
     * @param newViolations Axe violations generated by the backend evaluation
     * @returns 
     */
    private areIdentical(originalViolations: Array<Result>, newViolations: Array<Result>): boolean {
        return originalViolations == newViolations;
    }

    public async evaluatePage() {
        const res = await this.getAxeResults()

        //Some comparison logic
        if (this.areIdentical(this.originalAxeResults.violations, res.violations)) {
            // Call LLM service again
        }
        
        return this.generatedPage;
    }
}